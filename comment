#!/usr/bin/php
<?php
/*
    Copyright 2012 Szymon Olewniczak

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

define('CONFIG_FILE', $_SERVER['HOME']."/.disqus");
define('PATTERN_FILE', $_SERVER['HOME']."/.disqus-patterns");
define('DEFAULT_PATTERNS', serialize(
    array(
	'/disqus_shortname.*=.*\'(.*)\'/',
	'/disqus_shortname.*=.*"(.*)"/'
    )
));
function setup_wizard()
{
    $config_options = array('api_key', 'access_token');
    $config_notexist = array();
    $config_labels = array(
	'api_key' => 'Your disqus public API key(generate one at http://disqus.com/api/applications/):',
	'access_token' => 'Your account acces token:',
    );
    if(file_exists(CONFIG_FILE))
    {
	$config = parse_ini_file(CONFIG_FILE);
	foreach($config_options as $option)
	{
	    if(!array_key_exists($option, $config))
		$config_notexist[] = $option;
	}
    } else
    {
	$config_notexist = $config_options;
    }
    $config_file = fopen(CONFIG_FILE, 'a');
    if($config_file == false)
    {
	echo "Cannot open config file: ".CONFIG_FILE."\n";
	exit(1);
    }
    foreach($config_notexist as $option)
    {
	echo $config_labels[$option]; 
	$line = fgets(STDIN);
	if(fwrite($config_file, "$option = $line") == false)
	{
	    echo 'Cannot write to config file: '.CONFIG_FILE."\n";
	    exit(1);
	}
    }
    fclose($config_file);
    return parse_ini_file(CONFIG_FILE);
}
function update_config_file($config=array())
{
    if(file_exists(CONFIG_FILE))
    {
	$config_file_values = parse_ini_file(CONFIG_FILE);
	$new_config = array_replace($config_file_values, $config);
    } else
    {
	$new_config = $config;
    }
    
    $config_file = fopen(CONFIG_FILE, 'w');
    if($config_file == false)
    {
	echo "Cannot open config file: ".CONFIG_FILE."\n";
	exit(1);
    }
    foreach($new_config as $option => $value)
    {
	if(fwrite($config_file, "$option = $value\n") == false)
	{
	    echo 'Cannot write to config file: '.CONFIG_FILE."\n";
	    exit(1);
	}
    }
    fclose($config_file);
    
}
function curl_fileds_str($fields)
{
    $fields_string = '';
    foreach($fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }
    rtrim($fields_string,'&');
    return $fields_string;
}
function read_from_pattern_file()
{
    $patterns = array();
    if(file_exists(PATTERN_FILE))
    {
	$patterns = file(PATTERN_FILE);
	if($patterns == false)
	{
	    echo "Cannot open pattern file: ".PATTERN_FILE."\n";
	    exit(1);
	}

	$new = array_diff(unserialize(DEFAULT_PATTERNS), array_map('trim', $patterns));

	$pattern_file = fopen(PATTERN_FILE, 'a');
	if($pattern_file == false)
	{
	    echo "Cannot open pattern file: ".PATTERN_FILE."\n";
	    exit(1);
	}
	foreach($new as $toadd)
	{
	    if(fwrite($pattern_file, "$toadd\n") == false)
	    {
		echo 'Cannot write to pattern file: '.PATTERN_FILE."\n";
		exit(1);
	    }
	}
    } else
    {
	$pattern_file = fopen(PATTERN_FILE, 'a');

	if($pattern_file == false)
	{
	    echo "Cannot open pattern file: ".PATTERN_FILE."\n";
	    exit(1);
	}

	foreach(unserialize(DEFAULT_PATTERNS) as $pattern)
	{
	    if(fwrite($pattern_file, "$pattern\n") == false)
	    {
		echo 'Cannot write to pattern file: '.PATTERN_FILE."\n";
		exit(1);
	    }
	    $patterns[] = $pattern;
	}
    }

    fclose($pattern_file);
    return $patterns;
}
function get_forum($url)
{
    $subject = @file_get_contents($url);
    if($subject == false)
    {
	echo "Cannot open page with given url.\n";
	exit(1);
    }
    $patterns = read_from_pattern_file();
    foreach($patterns as $pattern)
    {
	preg_match($pattern, $subject, $matches);
	if(isset($matches[1]))
	{
	    return $matches[1];
	}
    }
    //Nothing found
    $domain = str_ireplace('www.', '', parse_url($url, PHP_URL_HOST));
    $domain_ex = explode('.', $domain);
    return $domain_ex[0];
}
function help_msg()
{
    echo "Usage: [-u disqus page url][-c comment][-a api_key][-t acount_access_token][-w][-h]\n";
    echo "       If -w option is passed, -a and -t options will be saved to config file\n";
    exit(0);
}

$config = array();
$options = getopt("u:c:a:t:wh");
if(!isset($options['w']))
    $config = setup_wizard();
$message = "";
$thread = ""; //Threat URL

if(isset($options['h']) || empty($options))
{
    help_msg();
}
if(isset($options['a']))
    $config['api_key'] = $options['a'];
if(isset($options['t']))
    $config['access_token'] = $options['t'];

if(isset($options['w']))
{
    update_config_file($config);
    $config = setup_wizard();
}

if(isset($options['u']))
{
    if(!isset($options['c']))
    {
	echo "Post your message. Press ^D when you finish\n";
	while (FALSE !== ($line = fgets(STDIN))) {
	    $message .= $line;
	}
    } else
    {
	$message = $options['c'];
    }
    $thread = $options['u'];
    if($thread == '')
    {
	echo "Page url cannot be empty.";
	exit(0);
    }

    $forum = get_forum($thread);

    echo "Disqus forum name: $forum\n";
    $url_thread_id = 'http://disqus.com/api/3.0/threads/details.json';
    $fields = array(
	'api_key'=>urlencode($config['api_key']), // change to api_key when using a public key
	'thread:link'=>urlencode($thread),
	'forum' => urlencode($forum)
    );

    $fields_string = curl_fileds_str($fields);
    $ch = curl_init();
    curl_setopt($ch,CURLOPT_URL,$url_thread_id.'?'.$fields_string);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $result = curl_exec($ch);
    curl_close($ch);
    $thread_data = json_decode($result);
    if($thread_data->code != 0)
    {
	echo $thread_data->response."\n";
	exit(1);
    }
    $thread_id = $thread_data->response->id;

    echo "Thread id: $thread_id\n";

    $url_post = 'http://disqus.com/api/3.0/posts/create.json'; 
    $fields = array(
	'api_key'=>urlencode($config['api_key']),
	'access_token'=>urlencode($config['access_token']),
	'thread'=>urlencode($thread_id),
	'message'=>urlencode($message),
    );

    $fields_string = curl_fileds_str($fields);
    $ch = curl_init();
    curl_setopt($ch,CURLOPT_URL,$url_post);
    curl_setopt($ch,CURLOPT_POST,count($fields));
    curl_setopt($ch,CURLOPT_POSTFIELDS,$fields_string);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $result = curl_exec($ch);
    curl_close($ch);
    $result_obj = json_decode($result);
    if($result_obj->code != 0)
    {
	echo $result_obj->response."\n";
	exit(1);
    }
} else
{
    help_msg();
}
